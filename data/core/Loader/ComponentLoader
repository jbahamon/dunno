local Class = require 'lib.hump.class'

local TransformComponent = require 'data.core.Component.TransformComponent'
local CollisionComponent = require 'data.core.Component.CollisionComponent'
local AnimationComponent = require 'data.core.Component.AnimationComponent'
local StateMachineComponent = require 'data.core.Component.StateMachineComponent'
local InputComponent = require 'data.core.Component.InputComponent'
local PhysicsComponent = require 'data.core.Component.PhysicsComponent'

local ComponentLoader = {}

function ComponentLoader.loadComponents(character, parameters)
    
    character:addComponent(TransformComponent(character))

    if parameters.input ~= false then
        ComponentLoader.loadInput(character)
    end

    if parameters.physics ~= false then
        ComponentLoader.loadPhysics(character)
    end 

    if parameters.animation then
        ComponentLoader.loadAnimation(character, parameters.animation)
    end    

    if parameters.collision then
        ComponentLoader.loadCollision(character, parameters.collision)
    end    
    
    if parameters.stateMachine then
        ComponentLoader.loadStateMachine(character, parameters.stateMachine)     
    end

end

function ComponentLoader.loadPhysics(character)
    character:addComponent(PhysicsComponent())
end

function ComponentLoader.loadTransform(character)
    character:addComponent(TransformComponent())
end

function ComponentLoader.loadInput(character)
    character:addComponent(InputComponent())
end

function ComponentLoader.loadAnimation(character, parameters)
    assert(parameters.sprites and 
           parameters.animations, "Both sprites and animations must be defined for animation component of character " .. name)

    assert(parameters.sprites.sheet and 
           parameters.sprites.spriteSize, "sheet and spriteSize must be defined for character " .. name)

    character:addComponent(AnimationComponent(globals.characterFolder ..  string.gsub(name, "[^%a%d-_/]", "") 
                                                    .. "/" .. parameters.sprites.sheet, 
                                                parameters.sprites.spriteSize, 
                                                parameters.sprites.spriteOffset))

    for k, v in pairs(parameters.animations) do
        character.animation:addAnimation(k, v)
    end
end

function ComponentLoader.loadStateMachine(character, parameters)
   assert(parameters.initialState and type(parameters.initialState) == "string", "Must specify a valid initial state")

    character:addComponent(StateMachineComponent())

    if parameters.basicStates then
        Loader.loadBasicStates(character, parameters.basicStates)
    end

    if parameters.states then
        Loader.loadStates(character, parameters.states)
    end

    if parameters.transitions then
        Loader.loadTransitions(character, parameters.transitions)
    end

    character.stateMachine.initialState = parameters.initialState
end

function ComponentLoader.loadCollision(characters, parameters)
    character:addComponent(CollisionComponent(parameters.size))

    if parameters.elementType == "Enemy" then
        character.collision.damagesOnContact = true
    end

end


return ComponentLoader
